ðŸ‘‰Problem: New Companies

write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.

Note:

The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.

__________________________________________________________
ðŸ‘‰SOLUTION-1 USING RELATED SUBQUERY 

SELECT 
    c.company_code, 
    c.founder, 
    (SELECT COUNT(DISTINCT lm.lead_manager_code) FROM Lead_Manager AS lm 
     WHERE lm.company_code = c.company_code),
    
    (SELECT COUNT(DISTINCT sm.senior_manager_code) FROM Senior_Manager AS sm 
     WHERE sm.company_code = c.company_code),
    
    (SELECT COUNT(DISTINCT m.manager_code) FROM Manager AS m 
     WHERE m.company_code = c.company_code), 
    
    (SELECT COUNT(DISTINCT e.employee_code) FROM Employee AS e 
     WHERE e.company_code = c.company_code) AS total_employees

FROM Company AS c
ORDER BY c.company_code;

__________________________________________________________

ðŸ‘‰SOLUTION-2: USING JOIN (PERFORMANCE WISE OPTIMISED QUERY)

SELECT 
    c.company_code, 
    c.founder, 
    COUNT(DISTINCT lm.lead_manager_code) AS total_lead_managers,
    COUNT(DISTINCT sm.senior_manager_code) AS total_senior_managers,
    COUNT(DISTINCT m.manager_code) AS total_managers,
    COUNT(DISTINCT e.employee_code) AS total_employees
FROM Company c
LEFT JOIN Lead_Manager lm ON c.company_code = lm.company_code
LEFT JOIN Senior_Manager sm ON c.company_code = sm.company_code
LEFT JOIN Manager m ON c.company_code = m.company_code
LEFT JOIN Employee e ON c.company_code = e.company_code
GROUP BY c.company_code, c.founder
ORDER BY c.company_code;


__________________________________________________________
